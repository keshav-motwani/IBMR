// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// fit_Gamma_Newton
List fit_Gamma_Newton(const List& Y_matrix_list, const List& X_list, const List& Z_list, double rho, int n_iter, double tolerance, arma::field<arma::mat> Gamma_list_old);
RcppExport SEXP _IBMR_fit_Gamma_Newton(SEXP Y_matrix_listSEXP, SEXP X_listSEXP, SEXP Z_listSEXP, SEXP rhoSEXP, SEXP n_iterSEXP, SEXP toleranceSEXP, SEXP Gamma_list_oldSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type Y_matrix_list(Y_matrix_listSEXP);
    Rcpp::traits::input_parameter< const List& >::type X_list(X_listSEXP);
    Rcpp::traits::input_parameter< const List& >::type Z_list(Z_listSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< double >::type tolerance(toleranceSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::mat> >::type Gamma_list_old(Gamma_list_oldSEXP);
    rcpp_result_gen = Rcpp::wrap(fit_Gamma_Newton(Y_matrix_list, X_list, Z_list, rho, n_iter, tolerance, Gamma_list_old));
    return rcpp_result_gen;
END_RCPP
}
// fit_Gamma
List fit_Gamma(const List& Y_matrix_list, const List& X_list, const List& Z_list, double rho, int n_iter, double tolerance, arma::field<arma::mat> Gamma_list_old);
RcppExport SEXP _IBMR_fit_Gamma(SEXP Y_matrix_listSEXP, SEXP X_listSEXP, SEXP Z_listSEXP, SEXP rhoSEXP, SEXP n_iterSEXP, SEXP toleranceSEXP, SEXP Gamma_list_oldSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type Y_matrix_list(Y_matrix_listSEXP);
    Rcpp::traits::input_parameter< const List& >::type X_list(X_listSEXP);
    Rcpp::traits::input_parameter< const List& >::type Z_list(Z_listSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< double >::type tolerance(toleranceSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::mat> >::type Gamma_list_old(Gamma_list_oldSEXP);
    rcpp_result_gen = Rcpp::wrap(fit_Gamma(Y_matrix_list, X_list, Z_list, rho, n_iter, tolerance, Gamma_list_old));
    return rcpp_result_gen;
END_RCPP
}
// fit_alpha_Beta
List fit_alpha_Beta(const List& Y_matrix_list, const List& X_list, const List& Z_list, double lambda, int n_iter, double tolerance, arma::colvec alpha_old, arma::mat Beta_old);
RcppExport SEXP _IBMR_fit_alpha_Beta(SEXP Y_matrix_listSEXP, SEXP X_listSEXP, SEXP Z_listSEXP, SEXP lambdaSEXP, SEXP n_iterSEXP, SEXP toleranceSEXP, SEXP alpha_oldSEXP, SEXP Beta_oldSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type Y_matrix_list(Y_matrix_listSEXP);
    Rcpp::traits::input_parameter< const List& >::type X_list(X_listSEXP);
    Rcpp::traits::input_parameter< const List& >::type Z_list(Z_listSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< double >::type tolerance(toleranceSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type alpha_old(alpha_oldSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Beta_old(Beta_oldSEXP);
    rcpp_result_gen = Rcpp::wrap(fit_alpha_Beta(Y_matrix_list, X_list, Z_list, lambda, n_iter, tolerance, alpha_old, Beta_old));
    return rcpp_result_gen;
END_RCPP
}
// fit_alpha
List fit_alpha(const List& Y_matrix_list, const List& X_list, const List& Z_list, int n_iter, double tolerance, arma::colvec alpha_old);
RcppExport SEXP _IBMR_fit_alpha(SEXP Y_matrix_listSEXP, SEXP X_listSEXP, SEXP Z_listSEXP, SEXP n_iterSEXP, SEXP toleranceSEXP, SEXP alpha_oldSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type Y_matrix_list(Y_matrix_listSEXP);
    Rcpp::traits::input_parameter< const List& >::type X_list(X_listSEXP);
    Rcpp::traits::input_parameter< const List& >::type Z_list(Z_listSEXP);
    Rcpp::traits::input_parameter< int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< double >::type tolerance(toleranceSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type alpha_old(alpha_oldSEXP);
    rcpp_result_gen = Rcpp::wrap(fit_alpha(Y_matrix_list, X_list, Z_list, n_iter, tolerance, alpha_old));
    return rcpp_result_gen;
END_RCPP
}
// fit_alpha_Gamma_Newton
List fit_alpha_Gamma_Newton(const List& Y_matrix_list, const List& X_list, const List& Z_list, double rho, int n_iter, double tolerance, arma::colvec alpha_old, arma::field<arma::mat> Gamma_list_old);
RcppExport SEXP _IBMR_fit_alpha_Gamma_Newton(SEXP Y_matrix_listSEXP, SEXP X_listSEXP, SEXP Z_listSEXP, SEXP rhoSEXP, SEXP n_iterSEXP, SEXP toleranceSEXP, SEXP alpha_oldSEXP, SEXP Gamma_list_oldSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type Y_matrix_list(Y_matrix_listSEXP);
    Rcpp::traits::input_parameter< const List& >::type X_list(X_listSEXP);
    Rcpp::traits::input_parameter< const List& >::type Z_list(Z_listSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< double >::type tolerance(toleranceSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type alpha_old(alpha_oldSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::mat> >::type Gamma_list_old(Gamma_list_oldSEXP);
    rcpp_result_gen = Rcpp::wrap(fit_alpha_Gamma_Newton(Y_matrix_list, X_list, Z_list, rho, n_iter, tolerance, alpha_old, Gamma_list_old));
    return rcpp_result_gen;
END_RCPP
}
// fit_alpha_Gamma
List fit_alpha_Gamma(const List& Y_matrix_list, const List& X_list, const List& Z_list, double rho, int n_iter, double tolerance, arma::colvec alpha_old, arma::field<arma::mat> Gamma_list_old);
RcppExport SEXP _IBMR_fit_alpha_Gamma(SEXP Y_matrix_listSEXP, SEXP X_listSEXP, SEXP Z_listSEXP, SEXP rhoSEXP, SEXP n_iterSEXP, SEXP toleranceSEXP, SEXP alpha_oldSEXP, SEXP Gamma_list_oldSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type Y_matrix_list(Y_matrix_listSEXP);
    Rcpp::traits::input_parameter< const List& >::type X_list(X_listSEXP);
    Rcpp::traits::input_parameter< const List& >::type Z_list(Z_listSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< double >::type tolerance(toleranceSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type alpha_old(alpha_oldSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::mat> >::type Gamma_list_old(Gamma_list_oldSEXP);
    rcpp_result_gen = Rcpp::wrap(fit_alpha_Gamma(Y_matrix_list, X_list, Z_list, rho, n_iter, tolerance, alpha_old, Gamma_list_old));
    return rcpp_result_gen;
END_RCPP
}
// fit_alpha_Beta_Gamma_Newton
List fit_alpha_Beta_Gamma_Newton(const List& Y_matrix_list, const List& X_list, const List& Z_list, double lambda, double rho, int n_iter, double tolerance, arma::colvec alpha_old, arma::mat Beta_old, arma::field<arma::mat> Gamma_list_old);
RcppExport SEXP _IBMR_fit_alpha_Beta_Gamma_Newton(SEXP Y_matrix_listSEXP, SEXP X_listSEXP, SEXP Z_listSEXP, SEXP lambdaSEXP, SEXP rhoSEXP, SEXP n_iterSEXP, SEXP toleranceSEXP, SEXP alpha_oldSEXP, SEXP Beta_oldSEXP, SEXP Gamma_list_oldSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type Y_matrix_list(Y_matrix_listSEXP);
    Rcpp::traits::input_parameter< const List& >::type X_list(X_listSEXP);
    Rcpp::traits::input_parameter< const List& >::type Z_list(Z_listSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< double >::type tolerance(toleranceSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type alpha_old(alpha_oldSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Beta_old(Beta_oldSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::mat> >::type Gamma_list_old(Gamma_list_oldSEXP);
    rcpp_result_gen = Rcpp::wrap(fit_alpha_Beta_Gamma_Newton(Y_matrix_list, X_list, Z_list, lambda, rho, n_iter, tolerance, alpha_old, Beta_old, Gamma_list_old));
    return rcpp_result_gen;
END_RCPP
}
// fit_alpha_Beta_Gamma
List fit_alpha_Beta_Gamma(const List& Y_matrix_list, const List& X_list, const List& Z_list, double lambda, double rho, int n_iter, double tolerance, arma::colvec alpha_old, arma::mat Beta_old, arma::field<arma::mat> Gamma_list_old);
RcppExport SEXP _IBMR_fit_alpha_Beta_Gamma(SEXP Y_matrix_listSEXP, SEXP X_listSEXP, SEXP Z_listSEXP, SEXP lambdaSEXP, SEXP rhoSEXP, SEXP n_iterSEXP, SEXP toleranceSEXP, SEXP alpha_oldSEXP, SEXP Beta_oldSEXP, SEXP Gamma_list_oldSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type Y_matrix_list(Y_matrix_listSEXP);
    Rcpp::traits::input_parameter< const List& >::type X_list(X_listSEXP);
    Rcpp::traits::input_parameter< const List& >::type Z_list(Z_listSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< double >::type tolerance(toleranceSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type alpha_old(alpha_oldSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Beta_old(Beta_oldSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::mat> >::type Gamma_list_old(Gamma_list_oldSEXP);
    rcpp_result_gen = Rcpp::wrap(fit_alpha_Beta_Gamma(Y_matrix_list, X_list, Z_list, lambda, rho, n_iter, tolerance, alpha_old, Beta_old, Gamma_list_old));
    return rcpp_result_gen;
END_RCPP
}
// compute_gradient_Beta
arma::mat compute_gradient_Beta(const List& Y_matrix_list, const List& X_list, const List& Z_list, const arma::colvec& alpha, const arma::mat& Beta, const arma::field<arma::mat>& Gamma_list, int N);
RcppExport SEXP _IBMR_compute_gradient_Beta(SEXP Y_matrix_listSEXP, SEXP X_listSEXP, SEXP Z_listSEXP, SEXP alphaSEXP, SEXP BetaSEXP, SEXP Gamma_listSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type Y_matrix_list(Y_matrix_listSEXP);
    Rcpp::traits::input_parameter< const List& >::type X_list(X_listSEXP);
    Rcpp::traits::input_parameter< const List& >::type Z_list(Z_listSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Beta(BetaSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::mat>& >::type Gamma_list(Gamma_listSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_gradient_Beta(Y_matrix_list, X_list, Z_list, alpha, Beta, Gamma_list, N));
    return rcpp_result_gen;
END_RCPP
}
// compute_gradient_alpha
arma::colvec compute_gradient_alpha(const List& Y_matrix_list, const List& X_list, const List& Z_list, const arma::colvec& alpha, const arma::mat& Beta, const arma::field<arma::mat>& Gamma_list, int N);
RcppExport SEXP _IBMR_compute_gradient_alpha(SEXP Y_matrix_listSEXP, SEXP X_listSEXP, SEXP Z_listSEXP, SEXP alphaSEXP, SEXP BetaSEXP, SEXP Gamma_listSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type Y_matrix_list(Y_matrix_listSEXP);
    Rcpp::traits::input_parameter< const List& >::type X_list(X_listSEXP);
    Rcpp::traits::input_parameter< const List& >::type Z_list(Z_listSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Beta(BetaSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::mat>& >::type Gamma_list(Gamma_listSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_gradient_alpha(Y_matrix_list, X_list, Z_list, alpha, Beta, Gamma_list, N));
    return rcpp_result_gen;
END_RCPP
}
// compute_gradient_Gamma
arma::mat compute_gradient_Gamma(const arma::mat& Y, const arma::mat& X, const arma::mat& Z, const arma::colvec& alpha, const arma::mat& Beta, const arma::mat& Gamma, double rho, int N);
RcppExport SEXP _IBMR_compute_gradient_Gamma(SEXP YSEXP, SEXP XSEXP, SEXP ZSEXP, SEXP alphaSEXP, SEXP BetaSEXP, SEXP GammaSEXP, SEXP rhoSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Beta(BetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Gamma(GammaSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_gradient_Gamma(Y, X, Z, alpha, Beta, Gamma, rho, N));
    return rcpp_result_gen;
END_RCPP
}
// compute_negative_log_likelihood
double compute_negative_log_likelihood(const List& Y_matrix_list, const List& X_list, const List& Z_list, const arma::colvec& alpha, const arma::mat& Beta, const arma::field<arma::mat>& Gamma_list, int N);
RcppExport SEXP _IBMR_compute_negative_log_likelihood(SEXP Y_matrix_listSEXP, SEXP X_listSEXP, SEXP Z_listSEXP, SEXP alphaSEXP, SEXP BetaSEXP, SEXP Gamma_listSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type Y_matrix_list(Y_matrix_listSEXP);
    Rcpp::traits::input_parameter< const List& >::type X_list(X_listSEXP);
    Rcpp::traits::input_parameter< const List& >::type Z_list(Z_listSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Beta(BetaSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::mat>& >::type Gamma_list(Gamma_listSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_negative_log_likelihood(Y_matrix_list, X_list, Z_list, alpha, Beta, Gamma_list, N));
    return rcpp_result_gen;
END_RCPP
}
// compute_negative_log_likelihood_no_Gamma
double compute_negative_log_likelihood_no_Gamma(const List& Y_matrix_list, const List& X_list, const arma::colvec& alpha, const arma::mat& Beta, int N);
RcppExport SEXP _IBMR_compute_negative_log_likelihood_no_Gamma(SEXP Y_matrix_listSEXP, SEXP X_listSEXP, SEXP alphaSEXP, SEXP BetaSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type Y_matrix_list(Y_matrix_listSEXP);
    Rcpp::traits::input_parameter< const List& >::type X_list(X_listSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Beta(BetaSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_negative_log_likelihood_no_Gamma(Y_matrix_list, X_list, alpha, Beta, N));
    return rcpp_result_gen;
END_RCPP
}
// compute_negative_log_likelihood_1
double compute_negative_log_likelihood_1(const arma::mat& Y, const arma::mat& X, const arma::mat& Z, const arma::colvec& alpha, const arma::mat& Beta, const arma::mat& Gamma, int N);
RcppExport SEXP _IBMR_compute_negative_log_likelihood_1(SEXP YSEXP, SEXP XSEXP, SEXP ZSEXP, SEXP alphaSEXP, SEXP BetaSEXP, SEXP GammaSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Beta(BetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Gamma(GammaSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_negative_log_likelihood_1(Y, X, Z, alpha, Beta, Gamma, N));
    return rcpp_result_gen;
END_RCPP
}
// group_lasso_penalty
double group_lasso_penalty(const arma::mat& Beta, double lambda);
RcppExport SEXP _IBMR_group_lasso_penalty(SEXP BetaSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Beta(BetaSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(group_lasso_penalty(Beta, lambda));
    return rcpp_result_gen;
END_RCPP
}
// l2_penalty
double l2_penalty(const arma::field<arma::mat>& Gamma_list, double rho);
RcppExport SEXP _IBMR_l2_penalty(SEXP Gamma_listSEXP, SEXP rhoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::field<arma::mat>& >::type Gamma_list(Gamma_listSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    rcpp_result_gen = Rcpp::wrap(l2_penalty(Gamma_list, rho));
    return rcpp_result_gen;
END_RCPP
}
// compute_objective_function
double compute_objective_function(const List& Y_matrix_list, const List& X_list, const List& Z_list, const arma::colvec& alpha, const arma::mat& Beta, const arma::field<arma::mat>& Gamma_list, double lambda, double rho, int N);
RcppExport SEXP _IBMR_compute_objective_function(SEXP Y_matrix_listSEXP, SEXP X_listSEXP, SEXP Z_listSEXP, SEXP alphaSEXP, SEXP BetaSEXP, SEXP Gamma_listSEXP, SEXP lambdaSEXP, SEXP rhoSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type Y_matrix_list(Y_matrix_listSEXP);
    Rcpp::traits::input_parameter< const List& >::type X_list(X_listSEXP);
    Rcpp::traits::input_parameter< const List& >::type Z_list(Z_listSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Beta(BetaSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::mat>& >::type Gamma_list(Gamma_listSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_objective_function(Y_matrix_list, X_list, Z_list, alpha, Beta, Gamma_list, lambda, rho, N));
    return rcpp_result_gen;
END_RCPP
}
// compute_linear_predictor
arma::mat compute_linear_predictor(const arma::mat& X, const arma::mat& Z, const arma::colvec& alpha, const arma::mat& Beta, const arma::mat& Gamma);
RcppExport SEXP _IBMR_compute_linear_predictor(SEXP XSEXP, SEXP ZSEXP, SEXP alphaSEXP, SEXP BetaSEXP, SEXP GammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Beta(BetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Gamma(GammaSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_linear_predictor(X, Z, alpha, Beta, Gamma));
    return rcpp_result_gen;
END_RCPP
}
// compute_linear_predictor_no_Gamma
arma::mat compute_linear_predictor_no_Gamma(const arma::mat& X, const arma::colvec& alpha, const arma::mat& Beta);
RcppExport SEXP _IBMR_compute_linear_predictor_no_Gamma(SEXP XSEXP, SEXP alphaSEXP, SEXP BetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Beta(BetaSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_linear_predictor_no_Gamma(X, alpha, Beta));
    return rcpp_result_gen;
END_RCPP
}
// compute_probabilities
arma::mat compute_probabilities(const arma::mat& X, const arma::mat& Z, const arma::colvec& alpha, const arma::mat& Beta, const arma::mat& Gamma);
RcppExport SEXP _IBMR_compute_probabilities(SEXP XSEXP, SEXP ZSEXP, SEXP alphaSEXP, SEXP BetaSEXP, SEXP GammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Beta(BetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Gamma(GammaSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_probabilities(X, Z, alpha, Beta, Gamma));
    return rcpp_result_gen;
END_RCPP
}
// compute_probabilities_no_Gamma
arma::mat compute_probabilities_no_Gamma(const arma::mat& X, const arma::colvec& alpha, const arma::mat& Beta);
RcppExport SEXP _IBMR_compute_probabilities_no_Gamma(SEXP XSEXP, SEXP alphaSEXP, SEXP BetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Beta(BetaSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_probabilities_no_Gamma(X, alpha, Beta));
    return rcpp_result_gen;
END_RCPP
}
// compute_conditional_probabilities
arma::mat compute_conditional_probabilities(const arma::mat& Y_matrix, const arma::mat& P);
RcppExport SEXP _IBMR_compute_conditional_probabilities(SEXP Y_matrixSEXP, SEXP PSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Y_matrix(Y_matrixSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type P(PSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_conditional_probabilities(Y_matrix, P));
    return rcpp_result_gen;
END_RCPP
}
// group_lasso_prox
arma::mat group_lasso_prox(const arma::mat& matrix, double lambda);
RcppExport SEXP _IBMR_group_lasso_prox(SEXP matrixSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type matrix(matrixSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(group_lasso_prox(matrix, lambda));
    return rcpp_result_gen;
END_RCPP
}
// compute_min_step_size_Beta
double compute_min_step_size_Beta(const List& Y_matrix_list, const List& X_list, int N);
RcppExport SEXP _IBMR_compute_min_step_size_Beta(SEXP Y_matrix_listSEXP, SEXP X_listSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type Y_matrix_list(Y_matrix_listSEXP);
    Rcpp::traits::input_parameter< const List& >::type X_list(X_listSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_min_step_size_Beta(Y_matrix_list, X_list, N));
    return rcpp_result_gen;
END_RCPP
}
// compute_min_step_size_alpha
double compute_min_step_size_alpha(const List& Y_matrix_list);
RcppExport SEXP _IBMR_compute_min_step_size_alpha(SEXP Y_matrix_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type Y_matrix_list(Y_matrix_listSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_min_step_size_alpha(Y_matrix_list));
    return rcpp_result_gen;
END_RCPP
}
// compute_min_step_size_Gamma
arma::colvec compute_min_step_size_Gamma(const List& Y_matrix_list, const List& Z_list, double rho, int N);
RcppExport SEXP _IBMR_compute_min_step_size_Gamma(SEXP Y_matrix_listSEXP, SEXP Z_listSEXP, SEXP rhoSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type Y_matrix_list(Y_matrix_listSEXP);
    Rcpp::traits::input_parameter< const List& >::type Z_list(Z_listSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_min_step_size_Gamma(Y_matrix_list, Z_list, rho, N));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_IBMR_fit_Gamma_Newton", (DL_FUNC) &_IBMR_fit_Gamma_Newton, 7},
    {"_IBMR_fit_Gamma", (DL_FUNC) &_IBMR_fit_Gamma, 7},
    {"_IBMR_fit_alpha_Beta", (DL_FUNC) &_IBMR_fit_alpha_Beta, 8},
    {"_IBMR_fit_alpha", (DL_FUNC) &_IBMR_fit_alpha, 6},
    {"_IBMR_fit_alpha_Gamma_Newton", (DL_FUNC) &_IBMR_fit_alpha_Gamma_Newton, 8},
    {"_IBMR_fit_alpha_Gamma", (DL_FUNC) &_IBMR_fit_alpha_Gamma, 8},
    {"_IBMR_fit_alpha_Beta_Gamma_Newton", (DL_FUNC) &_IBMR_fit_alpha_Beta_Gamma_Newton, 10},
    {"_IBMR_fit_alpha_Beta_Gamma", (DL_FUNC) &_IBMR_fit_alpha_Beta_Gamma, 10},
    {"_IBMR_compute_gradient_Beta", (DL_FUNC) &_IBMR_compute_gradient_Beta, 7},
    {"_IBMR_compute_gradient_alpha", (DL_FUNC) &_IBMR_compute_gradient_alpha, 7},
    {"_IBMR_compute_gradient_Gamma", (DL_FUNC) &_IBMR_compute_gradient_Gamma, 8},
    {"_IBMR_compute_negative_log_likelihood", (DL_FUNC) &_IBMR_compute_negative_log_likelihood, 7},
    {"_IBMR_compute_negative_log_likelihood_no_Gamma", (DL_FUNC) &_IBMR_compute_negative_log_likelihood_no_Gamma, 5},
    {"_IBMR_compute_negative_log_likelihood_1", (DL_FUNC) &_IBMR_compute_negative_log_likelihood_1, 7},
    {"_IBMR_group_lasso_penalty", (DL_FUNC) &_IBMR_group_lasso_penalty, 2},
    {"_IBMR_l2_penalty", (DL_FUNC) &_IBMR_l2_penalty, 2},
    {"_IBMR_compute_objective_function", (DL_FUNC) &_IBMR_compute_objective_function, 9},
    {"_IBMR_compute_linear_predictor", (DL_FUNC) &_IBMR_compute_linear_predictor, 5},
    {"_IBMR_compute_linear_predictor_no_Gamma", (DL_FUNC) &_IBMR_compute_linear_predictor_no_Gamma, 3},
    {"_IBMR_compute_probabilities", (DL_FUNC) &_IBMR_compute_probabilities, 5},
    {"_IBMR_compute_probabilities_no_Gamma", (DL_FUNC) &_IBMR_compute_probabilities_no_Gamma, 3},
    {"_IBMR_compute_conditional_probabilities", (DL_FUNC) &_IBMR_compute_conditional_probabilities, 2},
    {"_IBMR_group_lasso_prox", (DL_FUNC) &_IBMR_group_lasso_prox, 2},
    {"_IBMR_compute_min_step_size_Beta", (DL_FUNC) &_IBMR_compute_min_step_size_Beta, 3},
    {"_IBMR_compute_min_step_size_alpha", (DL_FUNC) &_IBMR_compute_min_step_size_alpha, 1},
    {"_IBMR_compute_min_step_size_Gamma", (DL_FUNC) &_IBMR_compute_min_step_size_Gamma, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_IBMR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
